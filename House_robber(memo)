class Solution {
public:
    //using recursion
    int solveWithRecursion(vector<int>&nums , int index){
        if(index>=nums.size()){
            return 0;
        }
        int include = nums[index] + solveWithRecursion(nums,index+2);
        int exclude = 0 + solveWithRecursion(nums,index+1);

        int maxi = max(include,exclude);
        return maxi;
    }
    //using topdown approach
        int solveUsingMemo(vector<int>&nums , int index ,vector<int>&dp ){
        if(index>=nums.size()){
            return 0;
        }
        if(dp[index]!=-1){
            return dp[index];
        }
        int include = nums[index] + solveUsingMemo(nums,index+2,dp);
        int exclude = 0 + solveUsingMemo(nums,index+1,dp);

        dp[index] = max(include,exclude);
        return dp[index];
    }
    int rob(vector<int>& nums) {
      int index = 0;
      //creating dp arrey
      vector<int>dp(nums.size()+1,-1);
      int ans = solveUsingMemo(nums,index,dp);
      return ans;    
    }
};
