class Solution {
public:
    //using recursion
    int solveWithRecursion(vector<int>&nums , int index){
        if(index>=nums.size()){
            return 0;
        }
        int include = nums[index] + solveWithRecursion(nums,index+2);
        int exclude = 0 + solveWithRecursion(nums,index+1);

        int maxi = max(include,exclude);
        return maxi;
    }
    //using topdown approach
        int solveUsingMemo(vector<int>&nums , int index ,vector<int>&dp ){
        if(index>=nums.size()){
            return 0;
        }
        if(dp[index]!=-1){
            return dp[index];
        }
        int include = nums[index] + solveUsingMemo(nums,index+2,dp);
        int exclude = 0 + solveUsingMemo(nums,index+1,dp);

        dp[index] = max(include,exclude);
        return dp[index];
    }
    //using tabulation
    int solveUsingTabulation(vector<int>&nums){
            int n = nums.size();
            vector<int>dp(n,-1);
            dp[n-1] = nums[n-1];

            for(int index=n-2;index>=0;index--){
                //this is variable for index goes out of bond
                int tempans = 0;
                if(index+2 < n){
                    tempans = dp[index+2];
                }
                int include = nums[index] + tempans;
                int exclude = 0 + dp[index+1];
                dp[index] = max(include,exclude);
            } 
            return dp[0];
    }
        int solveUsingTabulationSO(vector<int>&nums){
            int n = nums.size();
            // vector<int>dp(n,-1);
            // dp[n-1] = nums[n-1];
            int prev = nums[n-1];
            int curr = 0;
            int next = 0;

            for(int index=n-2;index>=0;index--){
                //this is variable for index goes out of bond
                int tempans = 0;
                if(index+2 < n){
                    tempans = next;
                }
                int include = nums[index] + tempans;
                int exclude = 0 + prev;
                curr = max(include,exclude);

                next = prev;
                prev = curr;
            } 
            return prev;
    }
    int rob(vector<int>& nums) {
      int index = 0;
      //creating dp arrey
    //   vector<int>dp(nums.size()+1,-1);
      int ans =solveUsingTabulationSO(nums);
      return ans;    
    }
};
