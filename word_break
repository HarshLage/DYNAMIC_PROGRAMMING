class Solution {
public:
    bool check(string &s , vector<string>&word){
        for(auto i : word){
            if(s==i) return true;
        }
        return false;
    }
    bool solve(string &s , vector<string>& wordDict , int index,vector<int>&dp){
       if(index>=s.size()) return true;
       if(dp[index]!=-1){
        return dp[index];
       }
        string temp = "";
         bool flag = 0;
        for(int i=index;i<s.size();i++){
            temp += s[i];
            if(check(temp,wordDict)){
              flag = flag || solve(s,wordDict,i+1,dp);
            }
        }
        dp[index] = flag;
        return dp[index];
    }
    int tab(string &s , vector<string>&wordDict){
        vector<int>dp(s.size()+1,-1);
        dp[s.size()] = 1;
        for(int i=s.size()-1;i>=0;i--){
             bool flag = 0;
             string temp = "";
            for(int j = i;j<s.size();j++){
            
            temp+=s[j];
           
            if(check(temp,wordDict)){
                flag = flag || dp[j+1]; 
            }
            }
            dp[i] = flag;
          
        }
        return dp[0];
    }
    bool wordBreak(string s, vector<string>& wordDict) {
        vector<int>dp(s.size()+1,-1);
        return tab(s,wordDict);
    }
};
