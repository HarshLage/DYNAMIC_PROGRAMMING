class Solution {
public:
    long long int MOD = 1000000007;
    int recursion(int n , int k , int target , int diceUsed , int currSum){
        if(diceUsed == n && currSum == target){
            return 1;
        }
        if(diceUsed == n && currSum != target){
            return 0;
        }
        if(diceUsed!=n && currSum==target){
            return 0;
        }
        int ans = 0;
        for(int face = 1;face<=k;face++)
        {
            ans += recursion(n,k,target,diceUsed+1,currSum+face);
        }
        return ans;
    }
        int mem(int n , int k , int target , int diceUsed , int currSum , vector<vector<int>>&dp){
        if(diceUsed == n && currSum == target){
            return 1;
        }
        if(diceUsed == n && currSum != target){
            return 0;
        }
        if(diceUsed!=n && currSum==target){
            return 0;
        }
        if(dp[diceUsed][currSum]!=-1){
            return dp[diceUsed][currSum];
        }
        int ans = 0;
        for(int face = 1;face<=k;face++)
        {   int recurAns =0;
            if(currSum + face <= target){
                recurAns = mem(n,k,target, diceUsed + 1 , currSum + face,dp);
            }
            ans = ((ans % MOD) + (recurAns % MOD)) % MOD;
        }
        dp[diceUsed][currSum] = ans;
        return ans;
    }
    int tab(int n , int k , int target){
        vector<vector<int>>dp(n+1,vector<int>(target+1,0));
        dp[n][target] = 1;

        for(int dice = n-1;dice>=0;dice--){
            for(int sum = target ; sum>=0;sum--){
                 int ans = 0;
                 for(int face = 1;face<=k;face++)
                  {   
                    int recurAns =0;
                    if(sum + face <= target){
                     recurAns = dp[dice + 1 ][sum + face];
                  }
                  ans = ((ans % MOD) + (recurAns % MOD)) % MOD;
                }
             dp[dice][sum] = ans;
            }
        }
        return dp[0][0];
    }
        int tabSO(int n , int k , int target){
        vector<int>curr(target+1,0);
        vector<int>next(target+1,0);
        next[target] = 1;

        for(int dice = n-1;dice>=0;dice--){
            for(int sum = target ; sum>=0;sum--){
                 int ans = 0;
                 for(int face = 1;face<=k;face++)
                  {   
                    int recurAns =0;
                    if(sum + face <= target){
                     recurAns = next[sum + face];
                  }
                  ans = ((ans % MOD) + (recurAns % MOD)) % MOD;
                }
             curr[sum] = ans;
            }
            next =  curr;
        }
        return next[0];
    }
    int numRollsToTarget(int n, int k, int target) {
       int diceUsed = 0;
       int currSum = 0;
       vector<vector<int>>dp(n+1,vector<int>(target+1,-1));
       int ans = tabSO(n , k , target);
       return ans;
    }
};
