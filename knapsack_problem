#include <iostream>
#include<vector>
using namespace std;
int knapsackRec(int capacity , int wt[],int profit[],int index , int n){
  if(index>=n) return 0;
  
  int include = 0;
  if(wt[index] <= capacity){
    include = profit[index] + knapsackRec(capacity-wt[index],wt,profit,index+1,n);
  }
  int exclude = knapsackRec(capacity,wt,profit,index+1,n);
  int maxi = max(include,exclude);
  return maxi;
}
int memo(int capacity,int wt[],int profit[],int index , int n , vector<vector<int>>&dp){
  //  first basecase
   if(index>=n) return 0;
  
  
  //second base case
  if(dp[capacity][index]!=-1) return dp[capacity][index];

  int include = 0;
  if(wt[index] <= capacity){
    include = profit[index] + memo(capacity-wt[index],wt,profit,index+1,n,dp);
  }
  int exclude =0 + memo(capacity,wt,profit,index+1,n,dp);
  dp[capacity][index] = max(include,exclude);
  return dp[capacity][index];
}

//tabulation
int tab(int capacity,int wt[],int profit[],int n){
  vector<vector<int>>dp(capacity+1,vector<int>(n+1,-1)); 

  for(int row=0;row<=capacity;row++){
    dp[row][n] = 0;
  }

  for(int i=0;i<=capacity;i++){
    for(int j = n-1;j>=0;j--){
      int include = 0;
      if(wt[j] <= i){
        include = profit[j] + dp[i-wt[j]][j+1];
        }
       int exclude =0 + dp[i][j+1];
       dp[i][j] = max(include,exclude);
    }
  }
  return dp[capacity][0];
}
int space(int capacity,int wt[],int profit[],int n){
  vector<int>next(capacity+1,0);
  vector<int>curr(capacity+1,0);

  for(int j = n-1;j>=0;j--){
    for(int i=0;i<=capacity;i++){
      int include = 0;
      if(wt[j]<=i){
        include = profit[j] + next[i-wt[j]];
      }
      int exclude = 0 + next[i];
      curr[i] = max(include,exclude);
    }
    next = curr;
  }
  return curr[capacity];
}
int space2(int capacity,int wt[],int profit[],int n){
  vector<int>next(capacity+1,0);
 

  for(int j = n-1;j>=0;j--){
    for(int i=capacity;i>=0;i--){
      int include = 0;
      if(wt[j]<=i){
        include = profit[j] + next[i-wt[j]];
      }
      int exclude = 0 + next[i];
      next[i] = max(include,exclude);
    }
 
  }
  return next[capacity];
}

int main() {
  int wt[] = {10,20,30};
  int profit[] = {60,100,120};
  int index = 0;
  int n =3;
  int capacity = 50;
  vector<vector<int>>dp(capacity+1,vector<int>(n+1,-1));
  //answer of recursion
  int answer = knapsackRec(capacity,wt,profit,index,n);
  //answer of momoization
  int memoAns = memo(capacity,wt,profit,index,n,dp);

  // answer of tabulation
  int tabu = tab(capacity,wt,profit,n);

  int spaced = space(capacity,wt,profit,n);
  int sp2 = space2(capacity,wt,profit,n);
  cout<<answer<<endl;
  cout<<memoAns<<endl;
  cout<<tabu<<endl;
  cout<<spaced<<endl;
  cout<<sp2<<endl;
  return 0;
}
