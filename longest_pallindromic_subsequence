class Solution {
public:
       int recursion(string &a , string &b , int i , int j , vector<vector<int>>&dp ){
          if(i>=a.size()){
            return 0;
          }
          if(j>=b.size()){
            return 0;
          }
          if(dp[i][j]!=-1){
            return dp[i][j];
          }
          int ans = 0;
          if(a[i]==b[j]){
             ans = 1 +  recursion(a,b,i+1,j+1,dp);
          }
          else{
            ans = max(recursion(a,b,i+1,j,dp),recursion(a,b,i,j+1,dp));
          }
          dp[i][j] = ans;
          return ans;
       }
        int subsequencesSpace(string a,string b){
     
        vector<int>curr(a.size()+1,0);
        vector<int>next(a.size()+1,0);
        for(int j_id = b.size()-1; j_id>=0; j_id--){
        for(int i_id = a.size()-1;i_id>=0;i_id--){
            
                            int ans = 0;
                          if(a[i_id]==b[ j_id]){
                            ans = 1 + next[i_id+1];
                          }


                        else if(a[i_id] != b[ j_id] ){
                        ans = max( curr[i_id+1] , next[i_id] );
                        }
                        curr[i_id] = ans;
            }
            next = curr;
        }

        return next[0];
    }
    int longestPalindromeSubseq(string s) {
        string a = s;
        reverse(a.begin(),a.end());
        vector<vector<int>>dp(s.size()+1,vector<int>(a.size()+1,-1));
        
        int answer = recursion(s,a,0,0,dp);
        return answer;
    }
};
